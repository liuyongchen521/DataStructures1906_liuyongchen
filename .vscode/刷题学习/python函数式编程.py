当我们说起函数式编程来说，我们会看到如下函数式编程的长相：
函数式编程的三大特性：
1、不可变数据(immutable data) :像clojure一样，默认上变量是不可变的，如果你要改变变量
，你需要把变量copy出去修改，这样一来，可以让你的程序少很多bug，因为，程序中状态不好维护，在并发的时候
更好维护，(你可以试想一下你的程序有个复杂的状态，当以后别人改你的代码的时候，是很容易出bug的，
在并行中这样的问题就更多了)
2、first class functions :这个技术可以让你的函数就想变量一样来使用，也就是说，你的函数可以向变量一样被创建，
修改，并当成变量一样传递，返回返回或是在函数中嵌套函数。这个有点像Javascript的Prototype
3、尾递归优化：我们知道递归的害处，那就是如果递归很深的话，stack受不了，并会导致性能大幅度下降。所以
，我们使用尾递归优化技术——每次递归时都会重用stack，这样一来能够提升性能，当然，这需要语言或编译器的支持。Python就不支持。

#函数式编程的几个技术
map & reduce ：这个技术不用多说了，函数式编程最常见的技术就是对一个集合做Map和Reduce操作。这比起过程式的语言来说，在代码上要更容易阅读。（传统过程式的语言需要使用for/while循环，
然后在各种变量中把数据倒过来倒过去的）这个很像C++中的STL中的foreach，find_if，count_if之流的函数的玩法。

pipeline：这个技术的意思是，把函数实例成一个一个的action，然后，把一组action放到一个数组或是列表中，然后把数据传给这个action list，
数据就像一个pipeline一样顺序地被各个函数所操作，最终得到我们想要的结果。

recursing 递归 ：递归最大的好处就简化代码，
他可以把一个复杂的问题用很简单的代码描述出来。注意：递归的精髓是描述问题，而这正是函数式编程的精髓。

currying：把一个函数的多个参数分解成多个函数， 然后把函数多层封装起来，每层函数都返回一个函数去接收下一个参数这样，
可以简化函数的多个参数。在C++中，这个很像STL中的bind_1st或是bind2nd。

higher order function 高阶函数：所谓高阶函数就是函数当参数，把传入的函数做一个封装，
然后返回这个封装函数。现象上就是函数传进传出，就像面向对象对象满天飞一样

准则：
不依赖于外部的数据，而且也不改变外部数据的值，而是返回一个新的值给你。

理念：
把函数当成变量来用，关注于描述问题而不是怎么实现，这样可以让代码更易读。

python中函数式编程支持:
filter 函数的功能相当于过滤器。调用一个布尔函数bool_func来迭代遍历每个seq中的元素；返回一个使bool_seq返回值为true的元素的序列。

>>>a = [1,2,3,4,5,6,7]

>>>b = filter(lambda x: x > 5, a)

>>>print b

>>>[6,7]

map函数是对一个序列的每个项依次执行函数，下面是对一个序列每个项都乘以2：
>>> a = map(lambda x:x*2,[1,2,3])

>>> list(a)

[2, 4, 6]

reduce函数是对一个序列的每个项迭代调用函数，下面是求3的阶乘：

>>> reduce(lambda x,y:x*y,range(1,4))

6